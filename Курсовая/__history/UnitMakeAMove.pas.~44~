unit UnitMakeAMove;

interface

uses
    System.SysUtils, UnitCreatingFigures, UnitSetupBoard, Vcl.ExtCtrls, Types,
    Winapi.Windows, Vcl.Forms;

procedure MakeAMove(Figure: TFigure;
  NextPosOnBoardX, NextPosOnBoardY: Byte);
procedure MoveFigureToCell(var Board: TBoard; Figure: TFigure;
  PosX, PosY: Byte; FigureIsReal: Boolean = True);
procedure AfterPawnTranformedOrNot();
procedure KillFigureOnCell(PosX, PosY: Byte;
  ShouldWriteNotation: Boolean = True);
procedure DoOneFrameOfAnimation();
function CheckIfFigureOfColorIsUnderCursor(const ColorIsWhite: Boolean) : Boolean;

var
    NowIsTakingOnAisle, NowIsCastling: Boolean;
    LastMove: String[4];
    NowAnimating: Boolean;

implementation

uses UnitMainForm, UnitCheckChecksMatesAndStalemates, UnitReplayAndNotation,
    UnitTimer, UnitGrabbingFigures, UnitPawnTransformation;

var
    ImgToMoveWithAnimationGlobal: TImage;
    XPS_AnimationOfImg, YPS_AnimationOfImg, NeedTop_AnimationOfImg,
        NeedLeft_AnimationOfImg: SmallInt;

procedure MoveFigureWithAnimation(ImgToMoveWithAnimation
  : TFigure; NeedTop, NeedLeft: SmallInt; AnimationTime: Single = 0.1); forward;
procedure FigureMoveAndKillAnother(Figure: TFigure;
  NextPosOnBoardX, NextPosOnBoardY: Byte); forward;

procedure MakeAMove(Figure: TFigure;
  NextPosOnBoardX, NextPosOnBoardY: Byte);
begin
    // Notation
    BufferFor1Move := '';

    with FormMain do
    begin
        if not TimerForTimer.Enabled then
        begin
            TimerForTimer.Enabled := True;
            ImagePauseAndStartTimer.Picture := ImagePause.Picture;
            ImagePauseAndStartTimer.Visible := True;
        end;

        ButtonResign.Enabled := True;
        ButtonDraw.Enabled := True;

        FigureMoveAndKillAnother(Figure, NextPosOnBoardX, NextPosOnBoardY);

        if (Figure.FFigureType = 'P') and
          (NextPosOnBoardY = 1 + Ord(Figure.FIsWhite) * 7) then
            PawnTransformation(Figure)
        else
            AfterPawnTranformedOrNot();
    end;
end;

procedure AfterPawnTranformedOrNot();
begin
    WhiteIsToMove := not WhiteIsToMove;

    CheckIfCheckOrMateOrStaleMate();

    with FormMain do
    begin
        // Notation
        if WhiteIsToMove then
        begin
            ListBoxNotationB.Items.Add(BufferFor1Move);
        end
        else
        begin
            ListBoxNotationNum.Items.Add(IntToStr(High(Game.AllBoards) + 2) + '.');
            ListBoxNotationW.Items.Add(BufferFor1Move);
            CorrectLengthOfScrollboxForNotation();
        end;

        WriteOneMoveOfGame();

        if (Length(Game.AllBoards) > 1) or WhiteIsToMove then
            if WhiteIsToMove then
                Game.TimeRemainingB := Game.TimeRemainingB + DefaultAddingOnTimer
            else
                Game.TimeRemainingW := Game.TimeRemainingW + DefaultAddingOnTimer;

        ShowTimeOnTimer(not WhiteIsToMove);

        NSaveAs.Enabled := True;
    end;
end;

procedure FigureMoveAndKillAnother(Figure: TFigure;
  NextPosOnBoardX, NextPosOnBoardY: Byte);
var
    Rook: TFigure;

begin
    GameIsSaved := False;

    with Figure do
    begin
        // Notation
        if FFigureType <> 'P' then
            BufferFor1Move := BufferFor1Move + FFigureType;

        // Notation
        BufferFor1Move := BufferFor1Move + Chr(FPosOnBoardX + Ord('a') - 1) +
          IntToStr(FPosOnBoardY);

        if NowIsTakingOnAisle then
        begin
            if FIsWhite then
                KillFigureOnCell(NextPosOnBoardX, NextPosOnBoardY - 1)
            else
                KillFigureOnCell(NextPosOnBoardX, NextPosOnBoardY + 1);
        end
        else
            KillFigureOnCell(NextPosOnBoardX, NextPosOnBoardY);

        // Notation
        BufferFor1Move := BufferFor1Move + Chr(NextPosOnBoardX + Ord('a') - 1) +
          IntToStr(NextPosOnBoardY);

        if NowIsCastling then
        begin
            if NextPosOnBoardX > 5 then
            begin
                Rook := ArrOfFigures
                  [BoardReal[NextPosOnBoardX + 1][NextPosOnBoardY]
                  .CellFigureIndex];
                MoveFigureToCell(BoardReal, Rook, NextPosOnBoardX - 1,
                  NextPosOnBoardY);

                // Notation
                BufferFor1Move := '0-0';
            end
            else
            begin
                Rook := ArrOfFigures
                  [BoardReal[NextPosOnBoardX - 2][NextPosOnBoardY]
                  .CellFigureIndex];
                MoveFigureToCell(BoardReal, Rook, NextPosOnBoardX + 1,
                  NextPosOnBoardY);

                // Notation
                BufferFor1Move := '0-0-0';
            end;
        end;

        FHasMoved := True;
        LastMove := IntToStr(FPosOnBoardX) + IntToStr(FPosOnBoardY) +
          IntToStr(NextPosOnBoardX) + IntToStr(NextPosOnBoardY);
    end;

    MoveFigureToCell(BoardReal, Figure, NextPosOnBoardX, NextPosOnBoardY);
end;

procedure KillFigureOnCell(PosX, PosY: Byte;
  ShouldWriteNotation: Boolean = True);
var
    IndexOfFigureToKill: Byte;

begin
    if (BoardReal[PosX][PosY].CellFigureName <> '0') then
    begin
        IndexOfFigureToKill := BoardReal[PosX][PosY].CellFigureIndex;
        BoardReal[PosX][PosY].CellFigureName := '0';

        ArrOfFigures[IndexOfFigureToKill].Free;
        ArrOfFigures[IndexOfFigureToKill] := nil;

        // Notation
        if ShouldWriteNotation then
            BufferFor1Move := BufferFor1Move + 'x';
    end
    else
        // Notation
        if ShouldWriteNotation then
            BufferFor1Move := BufferFor1Move + '-';
end;


procedure MoveFigureToCell(var Board: TBoard; Figure: TFigure;
  PosX, PosY: Byte; FigureIsReal: Boolean = True);
var
    CoordTemp: TCoord;

begin
    with FormMain do
        with Figure do
        begin
            with Board[FPosOnBoardX][FPosOnBoardY] do
                CellFigureName := '0';

            if FigureIsReal then
            begin
                FPosOnBoardX := PosX;
                FPosOnBoardY := PosY;
            end
            else if Board[PosX][PosY].CellFigureName <> '0' then
                ArrOfFigures[Board[PosX][PosY].CellFigureIndex]
                  .FPsevdoKilled := True;

            with Board[PosX][PosY] do
            begin
                CellFigureColorIsWhite := FIsWhite;
                CellFigureName := FFigureType;
                CellFigureIndex := FFigureInd;
            end;

            if FigureIsReal then
            begin
                CoordTemp := CountCoordinatesOfFigure(PosX, PosY);

                if NowIsCastling and (FFigureType = 'R') then
                begin
                    Top := CoordTemp.Top;
                    Left := CoordTemp.Left;
                end
                else
                    MoveFigureWithAnimation(Figure, CoordTemp.Top, CoordTemp.Left);

                Width := MultPixels(SizeOfFigure);
                Height := MultPixels(SizeOfFigure);
            end;
        end;
end;

procedure MoveFigureWithAnimation(ImgToMoveWithAnimation
  : TFigure; NeedTop, NeedLeft: SmallInt; AnimationTime: Single = 0.1);
var
    TicksQuantity: Single;

begin
    with FormMain do
        with ImgToMoveWithAnimation do
        begin
            ImgToMoveWithAnimationGlobal := ImgToMoveWithAnimation;
            if (Abs(NeedTop - Top) > 10) or (Abs(NeedLeft - Left) > 10) then
            begin
                NowAnimating := True;

                TicksQuantity := AnimationTime * 1000 / TimerForAnimation.Interval;
                XPS_AnimationOfImg := Round((NeedLeft - Left) / TicksQuantity);
                YPS_AnimationOfImg := Round((NeedTop - Top) / TicksQuantity);

                NeedTop_AnimationOfImg := NeedTop;
                NeedLeft_AnimationOfImg := NeedLeft;

                TimerForAnimation.Enabled := True;
            end
            else
                ScaleFigure(ImgToMoveWithAnimation, 1);
        end;
end;

procedure DoOneFrameOfAnimation();
begin
    with ImgToMoveWithAnimationGlobal do
        if (Abs(NeedLeft_AnimationOfImg - Left) < Abs(XPS_AnimationOfImg)) or
          (Abs(NeedTop_AnimationOfImg - Top) < Abs(YPS_AnimationOfImg)) then
        begin
            FormMain.TimerForAnimation.Enabled := False;

            Top := NeedTop_AnimationOfImg;
            Left := NeedLeft_AnimationOfImg;

            NowAnimating := False;

            if CheckIfFigureOfColorIsUnderCursor(WhiteIsToMove) then
                Screen.Cursor := 1
            else
                Screen.Cursor := 3;
        end
        else
        begin
            Top := Top + YPS_AnimationOfImg;
            Left := Left + XPS_AnimationOfImg;
        end;
end;

function CheckIfFigureOfColorIsUnderCursor(const ColorIsWhite: Boolean) : Boolean;
var
    Fig: TFigure;
    i: Integer;
    Rect: TRect;
    ptCursor, ptPanel: TPoint;
    FigureFound : Boolean;

begin
    GetCursorPos(ptCursor);
    ptPanel := FormMain.PanelForBoard.ScreenToClient(Point(0, 0));;
    {ptCursor.X := ptCursor.X - ptPanel.X;
    ptCursor.Y := ptCursor.Y - ptPanel.Y;   }

    FormMain.LabelNotation.Caption := IntToStr(ptPanel.X) + ' ' + IntToStr(ptPanel.Y);

    FigureFound := False;
    i := 0;
    while (i < Length(ArrOfFigures)) and not FigureFound do
    begin
        Fig := ArrOfFigures[i];
        Rect := Fig.BoundsRect;
        if (ptCursor.X >= Rect.Left) and (ptCursor.X <= Rect.Right) and
        (ptCursor.Y >= Rect.Top) and (ptCursor.Y <= Rect.Bottom) and (Fig.FIsWhite = ColorIsWhite) then
            FigureFound := True;

        Inc(i);
    end;

    Result := FigureFound;
end;

end.
